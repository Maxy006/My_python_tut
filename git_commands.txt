Basic git commands with usages and meanings!

1.git init
Usage: git init [repository name]

We have to navigate to our project directory and type the command git init to initialize a Git repository 
for our local project folder. Git will create a hidden .git directory and use it for keeping its files organized 
in other subdirectories.

2. git add
Usage (i): git add [file(s) name]

This will add the specified file(s) into the Git repository, 
the staging area, where they are already being tracked by Git 
and now ready to be committed.

Usage (ii): git add . or git add *

This will take all our files into the Git repository, i.e., into the staging area.

3. git commit
 Usage: git commit -m “message”

This command records or snapshots files permanently in the version history.
All the files, which are there in the directory right now, are being saved in the Git file system.

4.4. git status
Usage: git status

This command will show the modified status of an existing file 
and the file addition status of a new file, if any, that has to be committed.

5. git remote
Usage: git remote add origin “[URL]”

Once everything is ready on our local system, we can start pushing our code 
to the remote (central) repository of the project. For that, follow the below steps:

Step 1:
(1) Login to the GitHub account if the account already exists (If not, sign up on github.com)
(2) Click on New

Step 2: Now, we have to create a new repository. Provide a name to our repository, 
select the privacy of the repository as Public, and then click on Create repository

Step 3: Click on the Copy icon on the right side of 
the URL box of the Github repository to copy the link and paste it as shown below:

1
git remote add origin “URL”
Now, we are ready to operate the remote commands in our repository that we have just created.

6. git push
Usage: git push origin [branch name]

Suppose, we have made some changes in the file and want to push the changes
to our remote repository on a particular branch. 
By using the command ‘git push,’ the local repository’s files can be synced with the remote repository on Github.

7. git clone
Usage: git clone [URL]

Suppose, we want to work on a file that is on a remote Github repository as another developer.
 How can we do that? We can work on this file by clicking on Clone or Download 
and copying the link and pasting it on the terminal with the git clone command. 
This will import the files of a project from the remote repository to our local system.

(1) The below screenshot shows from where to copy the link:
git clone "path"

8. git branch
Usage (i): git branch [name-of-the-branch]

When multiple developers are collaborating on a project or repository, 
branches become essential for managing different workspaces. Using this command, 
we can create a new branch (for example, ‘branch1’). 
This allows developers to work independently on their respective branches,
making changes and commits without affecting the main branch or other branches.

Usage (ii): git branch -D [name-of-the-branch]

Likewise, to delete a branch, we utilize the “git branch -D” command.
This enables us to remove a specific branch (e.g., ‘name-of-the-branch’) that is no longer needed,
cleaning up the repository and reducing clutter.

9. git checkout
Usage (i): git checkout [name-of-the-new-branch]

This command allows us to switch to an existing branch within our repository. 
It facilitates navigating to the desired branch, enabling us to add new files, 
make changes, and commit those files within that specific branch.

	
Usage (ii): git checkout -b [name-of-the-new-branch]
This command serves a dual function. Firstly, it creates a new branch with the given name (for example, ‘branch2’).
Secondly, it immediately switches our working environment to that newly created branch. 
This allows us to seamlessly begin working within the newly created branch, 
making it convenient to add files, make modifications, and commit changes exclusively within that branch.

10. git log
Usage (i): git log

The “git log” command is handy when we want to examine the detailed log 
of every commit in our repository. By executing this command, we can view the log specific to the branch 
we are currently in. Additionally, we can use “git log -3” to display the last three logs.

Usage (ii): git log –graph

For a visual representation of the commit history, we can utilize “git log –graph”. 
This option presents the commit-graph, showcasing the branching and merging of commits


14. git merge
Usage: git merge [another-file-name]

This command will combine multiple sequences of commits into one unified history. 
In the most frequent use cases, git merge is used to combine two branches. 
The git merge command takes two commit pointers, usually the branch tips, and finds a common base commit between them. 
Once it finds a common base commit, it will create a commit sequence.

16. git fetch
Usage: git fetch

When we use the command git fetch, Git gathers any commit from the target branch that does not exist 
in our current branch and stores it in our local repository. 
However, it does not merge it with our current branch.

18. git pull
Usage: git pull origin master

The git pull command first runs ‘git fetch’ which downloads the content from 
the specified remote repository and then immediately updates the local repo to match the content.

